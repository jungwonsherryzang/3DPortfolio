/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: nimzu (https://sketchfab.com/nimzuk)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/foxs-islands-163b68e09fcc47618450150be7785907
Title: Fox's islands
*/
import { useRef, useEffect } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame, useThree } from '@react-three/fiber';
import { a } from '@react-spring/three'; //animating applications

import islandScene from '../assets/3d/island.glb';

const Island = ({ isRotating, setIsRotating, setCurrentStage, ...props }) => {
    const islandRef = useRef();
    const { nodes, materials } = useGLTF(islandScene);

    const { gl, viewport } = useThree(); //access to three js render and viewport
    
    //setting when we rotating 
    const lastX = useRef(0); //horizontal position to get the last mouse position
    const rotationSpeed = useRef(0); //rotation speed
    const dampingFactor = 0.95; //damping factor

    //three functions relating to rotation
    const handlePointerDown = (e) => {
        e.stopPropagation(); //not touching any other functions
        e.preventDefault(); //not reload the page
        setIsRotating(true);

        //touch even on phone or mouse
        const clientX = e.touches ? e.touches[0].clientX : e.clientX;

        //store the last position
        lastX.current = clientX;
    }

    //releasing the mouse
    const handlePointerUp = (e) => {
        e.stopPropagation(); //not touching any other functions
        e.preventDefault(); //not reload the page
        setIsRotating(false);
    }

    const handlePointerMove = (e) => {
        e.stopPropagation(); //not touching any other functions
        e.preventDefault(); //not reload the page

        //applicable only rotating
        if (isRotating) {
            //touch even on phone or mouse
            const clientX = e.touches ? e.touches[0].clientX : e.clientX;

            //calculate horizontal position
            const delta = (clientX - lastX.current) / viewport.width;

            //update island rotation based on the mouse
            islandRef.current.rotation.y += delta * 0.01 * Math.PI;

            //update the last client X position
            lastX.current = clientX;

            //update the rotation speed
            rotationSpeed.current = delta * 0.01 * Math.PI
        }
    }

    //make it able to move through keyboard
    const handleKeyDown = (e) => {
        if (e.key === 'ArrowLeft') {
            if (!isRotating) setIsRotating(true);
            islandRef.current.rotation.y += 0.01 * Math.PI;
            rotationSpeed.current = 0.0125;
        } else if (e.key === 'ArrowRight') {
            islandRef.current.rotation.y -= 0.01 * Math.PI;
            rotationSpeed.current = -0.0125;
        }
    }

    const handleKeyUp = (e) => {
        if (e.key === 'ArrowLeft' || e.key === 'ArrowRight' ) {
            setIsRotating(false);
        }
    }

    //applying on every single frame
    useFrame(() => {
        if (!isRotating) {
            rotationSpeed.current *= dampingFactor; //making it slower

            if (Math.abs(rotationSpeed.current) < 0.001) {
                rotationSpeed.current = 0;
            }

            //slowing down the plane speed
            islandRef.current.rotation.y += rotationSpeed.current;
        } else { //when rotating
            const rotation = islandRef.current.rotation.y;

            const normalizedRotation = ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

            //setting the current stage based on the island's orientation
            switch(true) {
                case normalizedRotation >= 5.45 && normalizedRotation <= 5.85: setCurrentStage(4); break;
                case normalizedRotation >= 0.85 && normalizedRotation <= 1.3: setCurrentStage(3); break;
                case normalizedRotation >= 2.4 && normalizedRotation <= 2.6: setCurrentStage(2); break;
                case normalizedRotation >= 4.25 && normalizedRotation <= 4.75: setCurrentStage(1); break;
                default: setCurrentStage(null);
            }
        }
    })

    useEffect(() => {
        const canvas = gl.domElement; //only applying on canvas factor

        //adding event listeners to all pointers
        canvas.addEventListener('pointerdown', handlePointerDown);
        canvas.addEventListener('pointerup', handlePointerUp);
        canvas.addEventListener('pointermove', handlePointerMove);
        document.addEventListener('keydown', handleKeyDown);
        document.addEventListener('keyup', handleKeyUp);

        return () => {
            canvas.removeEventListener('pointerdown', handlePointerDown);
            canvas.removeEventListener('pointerup', handlePointerUp);
            canvas.removeEventListener('pointermove', handlePointerMove);
            document.removeEventListener('keydown', handleKeyDown);
            document.removeEventListener('keyup', handleKeyUp);
        }

    }, [gl, handlePointerDown, handlePointerUp, handlePointerMove]);

    return (
    <a.group ref={islandRef} {...props}>
      <mesh
        geometry={nodes.polySurface944_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh 
        geometry={nodes.polySurface945_tree1_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh 
        geometry={nodes.polySurface946_tree2_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface947_tree1_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh 
        geometry={nodes.polySurface948_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh 
        geometry={nodes.polySurface949_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.pCube11_rocks1_0.geometry}
        material={materials.PaletteMaterial001}
      />
    </a.group>
  )
}

export default Island;